/*
 * Decompiled with CFR 0.150.
 *
 * Could not load the following classes:
 *  io.netty.buffer.Unpooled
 *  net.minecraft.network.Packet
 *  net.minecraft.network.PacketBuffer
 *  net.minecraft.network.play.INetHandlerPlayServer
 *  net.minecraft.network.play.client.CPacketAnimation
 *  net.minecraft.network.play.client.CPacketConfirmTransaction
 *  net.minecraft.network.play.client.CPacketCustomPayload
 *  net.minecraft.network.play.client.CPacketEntityAction
 *  net.minecraft.network.play.client.CPacketPlayer
 *  net.minecraft.network.play.client.CPacketPlayer$Position
 *  net.minecraft.network.play.client.CPacketPlayer$Rotation
 *  net.minecraft.network.play.client.CPacketPlayerTryUseItemOnBlock
 *  net.minecraft.network.play.client.CPacketUseEntity
 *  net.minecraftforge.fml.common.eventhandler.SubscribeEvent
 *  net.minecraftforge.fml.common.gameevent.TickEvent
 */
package international.astro.hack.hacks.exploits;

import international.astro.events.PacketSendEvent;
import international.astro.hack.Hack;
import international.astro.hack.option.options.OList;
import international.astro.mixins.accessor.ICPacketPlayer;
import international.astro.util.TimerUtil;
import io.netty.buffer.Unpooled;

import java.io.ByteArrayOutputStream;
import java.io.DataOutputStream;
import java.io.IOException;
import java.util.concurrent.LinkedBlockingQueue;

import net.minecraft.network.Packet;
import net.minecraft.network.PacketBuffer;
import net.minecraft.network.play.INetHandlerPlayServer;
import net.minecraft.network.play.client.CPacketAnimation;
import net.minecraft.network.play.client.CPacketConfirmTransaction;
import net.minecraft.network.play.client.CPacketCustomPayload;
import net.minecraft.network.play.client.CPacketEntityAction;
import net.minecraft.network.play.client.CPacketPlayer;
import net.minecraft.network.play.client.CPacketPlayerTryUseItemOnBlock;
import net.minecraft.network.play.client.CPacketUseEntity;
import net.minecraftforge.fml.common.eventhandler.SubscribeEvent;
import net.minecraftforge.fml.common.gameevent.TickEvent;

@Hack.Construct(name = "Disabler", description = "disable anticheat's", category = Hack.Category.EXPLOIT)
public class Disabler
        extends Hack {
    private final LinkedBlockingQueue<Packet<INetHandlerPlayServer>> packets = new LinkedBlockingQueue();
    public TimerUtil timer = new TimerUtil();
    OList mode = new OList("Mode", "Tubnet", "Tubnet", "Verus");

    public Disabler() {
        this.addOption(this.mode);
    }

    @Override
    public void onEnable() {
        this.timer.reset();
        super.onEnable();
    }

    @Override
    public void onDisable() {
        if (this.nullCheck()) {
            return;
        }
        if (this.mode.isMode("TubNet")) {
            this.blink();
        }
        super.onDisable();
    }

    @SubscribeEvent
    public void onTick(TickEvent e) {
        if (this.mode.isMode("Tubnet")) {
            if (this.timer.passedMs(60L)) {
                this.blink();
                this.timer.reset();
            }
        } else if (this.mode.isMode("Verus") && this.timer.passedMs(490L)) {
            if (!this.packets.isEmpty()) {
                Disabler.mc.player.connection.sendPacket(this.packets.poll());
            }
            this.timer.reset();
        }
    }

    @SubscribeEvent
    public void onSend(PacketSendEvent e) {
        if (this.nullCheck()) {
            return;
        }
        if (this.mode.isMode("Tubnet")) {
            Packet<?> packet = e.getPacket();
            if (!(packet instanceof CPacketPlayer) || Disabler.mc.player.ticksExisted % 15 != 0) {
                return;
            }
            try {
                ByteArrayOutputStream b = new ByteArrayOutputStream();
                DataOutputStream out = new DataOutputStream(b);
                out.writeUTF(Disabler.mc.player.getGameProfile().getName());
                PacketBuffer buf = new PacketBuffer(Unpooled.buffer());
                buf.writeBytes(b.toByteArray());
                Disabler.mc.player.connection.sendPacket((Packet) new CPacketCustomPayload("matrix:geyser", buf));
            } catch (IOException ex) {
                ex.printStackTrace();
            }
            if (packet instanceof CPacketPlayer) {
                e.setCanceled(true);
            }
            if (packet instanceof CPacketPlayer.Position || packet instanceof CPacketPlayer.Rotation || packet instanceof CPacketPlayerTryUseItemOnBlock || packet instanceof CPacketAnimation || packet instanceof CPacketEntityAction || packet instanceof CPacketUseEntity) {
                e.setCanceled(true);
                this.packets.add(packet);
            }
        } else if (this.mode.isMode("Verus")) {
            if (e.getPacket() instanceof CPacketConfirmTransaction) {
                CPacketConfirmTransaction cPacketConfirmTransaction = (CPacketConfirmTransaction) e.getPacket();
                this.packets.add((Packet<INetHandlerPlayServer>) cPacketConfirmTransaction);
                e.setCanceled(true);
            }
            if (e.getPacket() instanceof CPacketPlayer) {
                CPacketPlayer cPacketPlayer = (CPacketPlayer) e.getPacket();
                if (Disabler.mc.player.ticksExisted % 40 == 0) {
                    ((ICPacketPlayer) cPacketPlayer).setY(-0.911);
                    ((ICPacketPlayer) cPacketPlayer).setOnGround(false);
                    ((ICPacketPlayer) cPacketPlayer).setMoving(true);
                }
            }
            if (Disabler.mc.player != null && Disabler.mc.player.ticksExisted <= 7) {
                this.timer.reset();
                this.packets.clear();
            }
        }
    }

    private void blink() {
        try {
            while (!this.packets.isEmpty()) {
                Disabler.mc.player.connection.sendPacket(this.packets.take());
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
}

